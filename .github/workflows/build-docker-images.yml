name: Build OpenAvatarChat AMD64 (Complete)

on:
  workflow_dispatch:  # 仅允许手动触发

env:
  IMAGE_NAME: openavatar-chat-complete
  IMAGE_TAG: latest

jobs:
  build-complete:
    runs-on: ubuntu-latest  # 使用AMD64运行器
    timeout-minutes: 480  # 8小时超时
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build complete OpenAvatarChat image
        run: |
          echo "🚀 开始构建完整的OpenAvatarChat ARM64镜像..."
          docker build \
            -f Dockerfile \
            -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --build-arg CONFIG_FILE=config/chat_with_dify.yaml \
            .

      - name: Test complete image
        run: |
          echo "🧪 测试镜像功能..."
          docker run --rm --entrypoint /bin/bash ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -c "echo '✅ OpenAvatarChat AMD64 image works!'"

          echo "🔧 测试Python环境..."
          docker run --rm --entrypoint uv ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} run python --version

          echo "🔧 测试uv包管理器..."
          docker run --rm --entrypoint uv ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --version

          echo "🔧 测试应用模块导入..."
          docker run --rm --entrypoint uv ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} run python -c "
          import sys
          sys.path.append('/root/open-avatar-chat/src')
          try:
            print('Testing import...')
            import demo
            print('✅ 应用模块导入成功')
          except Exception as e:
            print('❌ 导入失败:', str(e))
            sys.exit(1)
          "

          echo "🔧 测试关键依赖..."
          docker run --rm --entrypoint uv ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} run python -c "
          try:
            import loguru
            import torch
            import numpy
            print('✅ 关键依赖检查通过: loguru, torch, numpy')
          except ImportError as e:
            print('❌ 依赖缺失:', str(e))
            sys.exit(1)
          "

          echo "🔧 测试容器基础功能..."
          docker run --rm --entrypoint /bin/bash ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -c "
          echo '📁 检查工作目录...'
          pwd && ls -la
          echo '📁 检查虚拟环境...'
          ls -la .venv/ | head -10
          echo '✅ 容器基础功能正常'
          "

      - name: Save complete image
        run: |
          echo "💾 保存镜像为artifact..."

          # 首先验证镜像是否存在
          echo "🔍 检查镜像是否存在..."
          docker images ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

          # 检查磁盘空间
          echo "💽 检查磁盘使用情况..."
          df -h
          echo "💽 当前目录磁盘使用:"
          du -sh . 2>/dev/null || echo "du命令失败"

          # 清理不需要的Docker数据
          echo "🧹 清理Docker系统..."
          docker system prune -f
          docker image prune -f

          echo "💽 清理后的磁盘使用情况:"
          df -h

          # 直接管道压缩，避免创建大临时文件
          echo "📦 创建并压缩镜像..."
          docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} | gzip -c > ${{ env.IMAGE_NAME }}-amd64.tar.gz

          # 检查压缩结果
          echo "📊 压缩后大小:"
          ls -lh ${{ env.IMAGE_NAME }}-amd64.tar.gz

          # 再次验证镜像信息
          echo "📊 原始镜像大小:"
          docker images ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

          # 验证文件是否正确创建
          echo "✅ 文件验证:"
          file ${{ env.IMAGE_NAME }}-amd64.tar.gz || echo "file命令不可用"
          echo "文件大小（字节）:"
          stat -c %s ${{ env.IMAGE_NAME }}-amd64.tar.gz 2>/dev/null || wc -c < ${{ env.IMAGE_NAME }}-amd64.tar.gz

          # 最终磁盘检查
          echo "💽 最终磁盘使用情况:"
          df -h

      - name: Upload complete image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-amd64
          path: ${{ env.IMAGE_NAME }}-amd64.tar.gz
          retention-days: 7

      - name: Show build summary
        run: |
          echo "✅ 构建完成!"
          echo "📦 完整的OpenAvatarChat AMD64镜像已准备好下载"
          echo "🔧 镜像信息:"
          docker images ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          echo ""
          echo "📥 下载方式:"
          echo "1. 在GitHub Actions页面下载artifact"
          echo "2. 解压: gunzip ${{ env.IMAGE_NAME }}-amd64.tar.gz"
          echo "3. 加载: docker load < ${{ env.IMAGE_NAME }}-amd64.tar"
          echo "4. 运行: docker run -it ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          echo ""
          echo "💡 使用提示:"
          echo "- 确保有GPU环境以获得最佳性能"
          echo "- 运行时挂载必要的目录: -v \$(pwd)/config:/root/open-avatar-chat/config"
          echo "- 查看README.md了解详细配置说明"
